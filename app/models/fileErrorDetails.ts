import * as Joi from "joi";
import { DataTypes, Model } from "sequelize";
import sequelize from "../utils/database";
import * as moment from "moment";
import app from "../utils/app";

class FileErrorDetails extends Model { }

FileErrorDetails.init(
    {
        errorLogId:{
            type: DataTypes.BIGINT,
            allowNull: false,
            autoIncrement: true,
            autoIncrementIdentity: true,
            primaryKey: true,
            field: "Error_Log_Id",
            validate: {
                notEmpty: {
                  msg: "Error_Log_Id field cannot be empty",
                },
                notNull: {
                  msg: "Error_Log_id field cannot be null",
                },
              },
        },//  BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
        errorFileId:{
            type:DataTypes.BIGINT,
            field: "Error_File_Id",
            allowNull: false, 
            validate: {
                notEmpty: {
                  msg: "Error_File_Id field cannot be empty",
                },
                notNull: {
                  msg: "Error_File_id field cannot be null",
                },
              },
        },//  BIGINT NOT NULL,
        origFileId:{
            type:DataTypes.BIGINT,
            field: "Orig_File_Id",
            allowNull: false,
            validate: {
                notEmpty: {
                  msg: "Orig_File_Id field cannot be empty",
                },
                notNull: {
                  msg: "Orig_File_Id field cannot be null",
                },
              },
        },//  BIGINT NULL,
        errorType:{
            type: DataTypes.STRING(2),
            field: "Error_Type",
        },//  VARCHAR2(2) NULL,
        errorSequenceNum:{
            type: DataTypes.DECIMAL(10, 0),
            field: "Error_Sequence_Num",
            allowNull: false,
            validate: {
                notEmpty: {
                  msg: "Error_Sequence_Num field cannot be empty",
                },
                notNull: {
                  msg: "Error_Sequence_Num field cannot be null",
                },
              },
        },//  DECIMAL(10,0) NOT NULL,
        sourceRecord_ID:{
            type: DataTypes.STRING(30),
            field: "Source_Record_ID",
            allowNull: false,
            validate: {
                notEmpty: {
                  msg: "Error_Record_ID field cannot be empty",
                },
                notNull: {
                  msg: "Error_Record_ID field cannot be null",
                },
              }
        },//  VARCHAR2(30) NOT NULL,
        Error_Code:{
            type: DataTypes.STRING(20),
            field:"Error_Code",
            validate: {
                notEmpty: {
                  msg: "Error_Code field cannot be empty",
                },
                notNull: {
                  msg: "Error_Code field cannot be null",
                },
              },
        },//  VARCHAR2(20) NULL,
        Error_Message:{
            type: DataTypes.STRING(2500),
            field:"Error_Message",
            allowNull: false,
            validate: {
                notEmpty: {
                  msg: "Error_Message field cannot be empty",
                },
                notNull: {
                  msg: "Error_Message field cannot be null",
                },
              },
        },//  VARCHAR2(2500) NOT NULL,
        Created_On:{
            type: DataTypes.DATE,
            field: "Created_On"
        },//  date,
        Created_By:{
            type: DataTypes.STRING(50),
            field:"Created_By"
        }//  VARCHAR2(50) NULL,
    }, 
    {
        sequelize,
        tableName: "Contribution_Header_Submission",
        timestamps: false
      })


export default FileErrorDetails;
